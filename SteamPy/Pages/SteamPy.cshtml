@page "/SteamPy"
@model steamPy.Pages.SteamPyViewModel
@{
    Layout = "_JavasCriptLayout";
}
<style>
    .el-row {
        margin-bottom: 20px;
    }

    .cancelButton{
        color:red;
        
    }
</style>

<div id="main">
    <el-container>
        <el-main>
            <div>
                <el-row>
                    <el-col style="text-align: right;">
                        <el-input v-model="searchText" size="mini" placeholder="游戏名称" style="width:200px"></el-input>
                        <el-button type="primary" size="mini" icon="el-icon-search" @@click="handlerGetData">查询</el-button>
                        <el-button type="primary" size="mini" v-if="(getCookie('userId') || null) == null" icon="el-icon-s-custom" @@click="dialogSignUpVisible = false;dialogLoginVisible = true">登录</el-button>
                        <el-button type="primary" size="mini" v-if="(getCookie('userId') || null) == null" icon="el-icon-user" @@click="dialogSignUpVisible = true;dialogLoginVisible = false">注册</el-button>
                    </el-col>
                </el-row>
                <el-row v-if="sortVisible == true">
                    <el-col style="text-align: left;">
                        <el-radio-group v-model="sort">
                            <el-radio-button label="createTime">最新</el-radio-button>
                            <el-radio-button label="cdkCount">周销量</el-radio-button>
                            <el-radio-button label="keyTx">销量</el-radio-button>
                            <el-radio-button label="keyDiscount">折扣</el-radio-button>
                            <el-radio-button label="keyPrice">价格</el-radio-button>
                        </el-radio-group>
                    </el-col>
                </el-row>
            </div>
            <div>
                <el-tabs v-model="tabModelType" type="card" @@tab-click="handleTabModelClick">
                    <el-tab-pane label="Py游戏列表" name="pyGameList">
                        <el-row type="flex" align="middle">
                            <template>
                                <el-table ref="tbv" :data="pyGameListData" border stripe style="width: 100%;" height="650"
                                          :header-cell-style="{backgroundColor:'#F5F7FA',color:'#000000'}" @@current-change="handleSelectPyGame">
                                    <el-table-column type="index" width="50" label="序号" align="center">
                                    </el-table-column>
                                    <el-table-column v-if="false" prop="@(nameof(Model.GamePriceInfo.GameId))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.GameId))" align="center"></el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.GameNameCN))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.GameNameCN))" align="center"></el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.PriceDateInfo))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.PriceDateInfo))" align="center"></el-table-column>
                                    <el-table-column prop="@(nameof(Model.GamePriceInfo.SteamPrice))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.SteamPrice))" align="center"></el-table-column>
                                    <el-table-column label="steam链接" width="100">
                                        <template slot-scope="scope">
                                            <el-link type="primary" :href="scope.row.SteamUrl" target="_blank">主要链接</el-link>
                                        </template>
                                    </el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.AllLowPrice))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.AllLowPrice))" align="center"></el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.DayLowPrice))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.DayLowPrice))" align="center"></el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.AvgPrice))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.AvgPrice))" align="center"></el-table-column>
                                    <el-table-column fixed="right" label="操作" width="100">
                                        <template slot-scope="scope">
                                            <el-button @@click="handleFollowGameClick(scope.$index,scope.row)" type="text" size="small">关注</el-button>
                                        </template>
                                    </el-table-column>
                                </el-table>
                            </template>
                        </el-row>
                        <el-row type="flex" align="middle">
                            <div class="block">
                                <el-pagination @@size-change="handleSizeChange"
                                               @@current-change="handleCurrentPyGameChange"
                                               :current-page="currentPyGamePage"
                                               :page-sizes="pageSizes"
                                               :page-size.sync="pageSize"
                                               layout="total, sizes, prev, pager, next, jumper"
                                               :total.sync="pyGameTotal">
                                </el-pagination>
                            </div>
                        </el-row>
                    </el-tab-pane>
                    <el-tab-pane label="游戏列表" name="gameHistoryList">
                        <el-row type="flex" align="middle">
                            <template>
                                <el-table ref="tbv" :data="gameListData" border stripe style="width: 100%;"
                                          :header-cell-style="{backgroundColor:'#F5F7FA',color:'#000000'}" @@current-change="handleSelectGame">
                                    <el-table-column type="index" width="50" label="序号" align="center">
                                    </el-table-column>
                                    <el-table-column v-if="false" prop="@(nameof(Model.GamePriceInfo.GameId))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.GameId))" align="center"></el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.GameNameCN))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.GameNameCN))" align="center"></el-table-column>
                                    <el-table-column prop="@(nameof(Model.GamePriceInfo.PriceDate))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.PriceDateInfo))" align="center"></el-table-column>
                                    <el-table-column prop="@(nameof(Model.GamePriceInfo.SteamUrl))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.SteamUrl))" align="center"></el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.AllLowPrice))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.AllLowPrice))" align="center"></el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.DayLowPrice))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.DayLowPrice))" align="center"></el-table-column>
                                    <el-table-column sortable prop="@(nameof(Model.GamePriceInfo.AvgPrice))" label="@(Html.DisplayNameFor(model => model.GamePriceInfo.AvgPrice))" align="center"></el-table-column>
                                    <el-table-column fixed="right" label="操作" width="100">
                                        <template slot-scope="scope">
                                            <el-button @@click="handleFollowGameClick(scope.$index,scope.row)" type="text" size="small">关注</el-button>
                                        </template>
                                    </el-table-column>
                                </el-table>
                            </template>
                        </el-row>
                        <el-row type="flex" align="center">
                            <div class="block">
                                <el-pagination @@size-change="handleSizeChange"
                                               @@current-change="handleCurrentGameChange"
                                               :current-page="currentGamePage"
                                               :page-sizes="pageSizes"
                                               :page-size.sync="pageSize"
                                               layout="total, sizes, prev, pager, next, jumper"
                                               :total.sync="gameTotal">
                                </el-pagination>
                            </div>
                        </el-row>
                    </el-tab-pane>
                    <el-tab-pane label="关注游戏列表" name="userGameList">
                        <el-row type="flex" align="middle">
                            <template>
                                <el-table ref="tbv" :data="userGameListData" border stripe style="width: 100%;"
                                          :header-cell-style="{backgroundColor:'#F5F7FA',color:'#000000'}" @@current-change="handleSelectUserGame">
                                    <el-table-column type="index" width="50" label="序号" align="center">
                                    </el-table-column>
                                    <el-table-column v-if="false" prop="@(nameof(Model.UserWatch.Id))" label="@(Html.DisplayNameFor(model => model.UserWatch.Id))" align="center"></el-table-column>
                                    <el-table-column v-if="false" prop="@(nameof(Model.UserWatch.GameId))" label="@(Html.DisplayNameFor(model => model.UserWatch.GameId))" align="center"></el-table-column>
                                    <el-table-column prop="@(nameof(Model.UserWatch.GameName))" label="@(Html.DisplayNameFor(model =>  model.UserWatch.GameName))" align="center"></el-table-column>
                                    <el-table-column prop="@(nameof(Model.UserWatch.GameNameCN))" label="@(Html.DisplayNameFor(model =>  model.UserWatch.GameNameCN))" align="center"></el-table-column>
                                    <el-table-column label="steam链接" width="100">
                                        <template slot-scope="scope">
                                            <el-link type="primary" :href="scope.row.SteamUrl" target="_blank">主要链接</el-link>
                                        </template>
                                    </el-table-column>
                                    <el-table-column prop="@(nameof(Model.UserWatch.NowLowPrice))" label="@(Html.DisplayNameFor(model =>  model.UserWatch.NowLowPrice))" align="center"></el-table-column>
                                    <el-table-column prop="@(nameof(Model.UserWatch.SendMailPrice))" label="@(Html.DisplayNameFor(model =>  model.UserWatch.SendMailPrice))" align="center"></el-table-column>
                                    <el-table-column fixed="right" label="操作" width="100">
                                        <template slot-scope="scope">
                                            <el-button @@click="handleFollowGameClick(scope.$index,scope.row)" type="text" size="small">编辑</el-button>
                                            <el-button @@click="handleFollowGameRemoveClick(scope.$index,scope.row)" type="text" size="small">删除</el-button>
                                        </template>
                                    </el-table-column>
                                </el-table>
                            </template>
                        </el-row>
                        <el-row type="flex" align="middle">
                            <div class="block">
                                <el-pagination @@size-change="handleSizeChange"
                                               @@current-change="handleCurrentUserGameChange"
                                               :current-page="currentUserGamePage"
                                               :page-sizes="pageSizes"
                                               :page-size.sync="pageSize"
                                               layout="total, sizes, prev, pager, next, jumper"
                                               :total.sync="userGameTotal">
                                </el-pagination>
                            </div>
                        </el-row>
                    </el-tab-pane>
                </el-tabs>
            </div>
        </el-main>
    </el-container>
    <el-dialog :visible.sync="dialogLoginVisible" width="400" height="800" append-to-body>
        <el-row type="flex" justify="center">
            <el-col :span="23">
                <el-form :model="loginForm" ref="loginForm" label-width="10em" class="cl-loginForm">
                    <el-form-item label="用户名"
                                  prop="userName"
                                  :rules="rules.userName">
                        <el-input v-model="loginForm.userName" placeholder="请输入用户名" width="100%" :autosize="{ minRows: 4, maxRows: 35}"></el-input>
                    </el-form-item>
                    <el-form-item label="密码"
                                  prop="password"
                                  :rules="rules.password">
                        <el-input v-model="loginForm.password" placeholder="请输入密码" show-password width="100%" :autosize="{ minRows: 4, maxRows: 35}"></el-input>
                    </el-form-item>

                    <el-form-item>
                        <el-button type="primary" size="mini" icon="el-icon-user" @@click="handlerLogin">登 录</el-button>
                        <el-button @@click="dialogLoginVisible = false; dialogSignUpVisible = true ">注 册</el-button>
                        <el-button class="cancelButton" @@click="dialogLoginVisible = false">取 消</el-button>
                    </el-form-item>
                </el-form>
            </el-col>
        </el-row>
    </el-dialog>
    <el-dialog :visible.sync="dialogSignUpVisible" width="400" height="800" append-to-body>
        <el-row type="flex" justify="center">
            <el-col :span="23">
                <el-form :model="createForm" ref="createForm" label-width="10em" class="cl-createForm">
                    <el-form-item label="用户名"
                                  prop="userName"
                                  :rules="rules.userName">
                        <el-input v-model="createForm.userName" placeholder="请输入用户名" width="100%" :autosize="{ minRows: 4, maxRows: 35}"></el-input>
                    </el-form-item>
                    <el-form-item label="密码"
                                  prop="password"
                                  :rules="rules.password">
                        <el-input v-model="createForm.password" placeholder="请输入密码" show-password width="100%" :autosize="{ minRows: 4, maxRows: 35}"></el-input>
                    </el-form-item>
                    <el-form-item label="邮箱"
                                  prop="email">
                        <el-input v-model="createForm.email" placeholder="请输入邮箱" :autosize="{ minRows: 4, maxRows: 35}"></el-input>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" size="mini" icon="el-icon-user" @@click="handlerSignUp">注 册</el-button>
                        <el-button class="cancelButton" size="mini" @@click="dialogSignUpVisible = false">取 消</el-button>
                    </el-form-item>
                </el-form>
            </el-col>
        </el-row>
    </el-dialog>
    <el-dialog :visible.sync="dialogFollowGameVisible" width="400" height="800" append-to-body>
        <el-row type="flex" justify="center">
            <el-col :span="23">
                <el-form :model="followGameForm" ref="followGameForm" label-width="10em" class="cl-followGameForm">
                    <el-form-item label="gameId"
                                  prop="gameId"
                    v-if="false">
                        <el-input v-model="followGameForm.GameId" width="100%" :autosize="{ minRows: 4, maxRows: 35}"></el-input>
                    </el-form-item>
                    <el-form-item label="游戏名"
                                  prop="gameName" v-if="false">
                        <el-input v-model="followGameForm.GameName" :disabled="true" width="50%" :autosize="{ minRows: 4, maxRows: 35}"></el-input>
                    </el-form-item>
                    <el-form-item label="游戏名"
                                  prop="gameNameCN">
                        <el-input v-model="followGameForm.GameNameCN" :disabled="true" width="50%" :autosize="{ minRows: 4, maxRows: 35}"></el-input>
                    </el-form-item>
                    <el-form-item label="期望价格"
                                  prop="SendMailPrice">
                        <el-input-number v-model="followGameForm.SendMailPrice" placeholder="请输入期望价格" :precision="2" :step="0.1" :min="0.1" controls-position="right" :autosize="{ minRows: 4, maxRows: 35}"></el-input-number>
                    </el-form-item>
                    <el-form-item>
                        <el-button type="primary" size="mini" icon="el-icon-check" @@click="handleSubmitFollowGame">确 定</el-button>
                        <el-button icon="el-icon-close" class="cancelButton" size="mini" @@click="dialogFollowGameVisible = false">取 消</el-button>
                    </el-form-item>
                </el-form>
            </el-col>
        </el-row>
    </el-dialog>
</div>

@section Scripts{
    <script>
        var main = new Vue({
            el: "#main",
            data() {
                return {
                    sortVisible: false,
                    pyGameListData: [],
                    currentPyGamePage: 1,
                    pyGameTotal: 0,
                    selectPyGameRow: "",
                    sort: "createTime",
                    //零散游戏
                    gameListData: [],
                    currentGamePage: 1,
                    gameTotal: 0,
                    selectGameRow: "",
                    //用户关注的游戏
                    userGameListData: [],
                    currentUserGamePage: 1,
                    userGameTotal: 0,
                    selectUserGameRow: "",
                    dialogLoginVisible: false,
                    dialogSignUpVisible: false,
                    dialogFollowGameVisible:false,
                    loginForm: this.initLoginForm(),
                    createForm: this.initCreateForm(),
                    followGameForm: this.initFollowGame(),
                    //通用配置
                    searchText: "",
                    //tab
                    tabModelType: "userGameList",
                    tabModelTypes: ["pyGameList", "gameHistoryList", "userGameList"],
                    //页面
                    pageSize: 20,
                    pageSizes: [20, 30, 40, 50],
                    userId: "",
                    //登录
                    userName: "",
                    password: "",
                    rules: {
                        userName :[
                            { required: true, message: '请输入用户名', trigger: 'blur' }
                        ],
                        password: [
                            { required: true, message: '请输入密码', trigger: 'blur' }
                        ]
                    }
                };
            },
            mounted: async function () {
                await this.handlerInitGameList();
            },
            methods: {
                async handlerInitGameList() {
                    this.handlerGetData();
                },
                async handlerCheckUser(){
                    if ((this.getCookie("userId") || null) == null){
                        return;
                    }

                    await axios.get("?handler=CheckUser", null, {
                        params: {
                        }
                    }).then(res => {
                        if ((res.data || null) != null) {
                            if (res.data.Successed) {
                                return;
                            }
                            this.delCookie("userId");
                            this.dialogLoginVisible = true;
                        } else if ((res.response || null) != null && res.response.status != 200) {
                            this.$message.error("注册失败！")
                        }
                    }).catch((err) => {
                        this.$message.error(err);
                    });
                },
                async handlerGetData() {
                    await this.handlerCheckUser();
                    this.sortVisible = false;
                    this.refreceUserGameVisible = false;
                    switch (this.tabModelType) {
                        case "pyGameList":
                            this.sortVisible = true;
                            await this.handlerGetPyGameListByPage();
                            break;
                        case "gameHistoryList":
                            await this.handlerGetGameListByPage();
                            break;
                        case "userGameList":
                            await this.handlerGetUserGameListByPage();
                            break;
                        default:
                            break;
                    }
                },
                handleFollowGameClick(index, row) {
                    this.followGameForm = row;
                    this.dialogFollowGameVisible = true;
                },
                handleSubmitFollowGame(){
                    axios.post("?handler=FollowGameClick", null, {
                        params: this.followGameForm
                    }).then(res => {
                        if (this.tabModelType == "userGameList"){
                            this.handlerGetData();
                        }
                        this.dialogFollowGameVisible = false;
                    }).catch((err) => {
                        this.$message.error(err);
                    });
                },
                handleFollowGameRemoveClick(index, row) {
                    axios.post("?handler=FollowUserGameRemoveClick", null, {
                        params: {
                            gameId: row.GameId
                        }
                    }).then(res => {
                        if ((res.data || null) != null) {
                            this.userGameListData.splice(index, 1);
                        } else if ((res.response || null) != null && res.response.status != 200) {
                            this.$message.error(res.response.data)
                        }
                    }).catch((err) => {
                        this.$message.error(err);
                    });
                },
                async handlerGetPyGameListByPage(arg, callback) {
                    await axios.post("?handler=GetPyGameListByPage", null, {
                        params: {
                            current: this.currentPyGamePage,
                            size: this.pageSize,
                            gameName: this.searchText,
                            sort: this.sort
                        }
                    }).then(res => {
                        if ((res.data || null) != null) {
                            this.pyGameListData = res.data.result;
                            this.pyGameTotal = res.data.total;
                            this.currentPyGamePage = res.data.current;
                            if (callback) {
                                callback();
                            }
                        } else if ((res.response || null) != null && res.response.status != 200) {
                            this.$message.error(res.response.data)
                        }
                    });
                },
                async handlerGetGameListByPage(arg, callback) {
                    await axios.post("?handler=GetGameListByPage", null, {
                        params: {
                            current: this.currentGamePage,
                            size: this.pageSize,
                            search: this.searchText
                        }
                    }).then(res => {

                        if ((res.data || null) != null) {

                            this.gameListData = res.data.result;
                            this.gameTotal = res.data.total;
                            this.currentGamePage = res.data.current;
                            if (callback) {
                                callback();
                            }
                        } else if ((res.response || null) != null && res.response.status != 200) {
                            this.$message.error(res.response.data)
                        }
                    });
                },
                async handlerGetUserGameListByPage(arg, callback) {
                    if ((this.getCookie("userId") || null) == null) {
                        this.dialogLoginVisible = true;
                        return;
                    }
                    await axios.post("?handler=GetUserGameListByPage", null, {
                        params: {
                            current: this.currentUserGamePage,
                            size: this.pageSize,
                            search: this.searchText
                        }
                    }).then(res => {

                        if ((res.data || null) != null) {
                            this.userGameListData = res.data.Result;
                            this.userGameTotal = res.data.Total;
                            this.currentGamePage = res.data.Current;
                            if (callback) {
                                callback();
                            }
                        } else if ((res.response || null) != null && res.response.status != 200) {
                            this.$message.error(res.response.data)
                        }
                    }).catch((err) => {
                        this.$message.error(err);
                    });
                },
                async handleSizeChange() {
                    await this.handlerGetData();
                },
                async handleTabModelClick(tab, event) {
                    await this.handlerGetData();
                },
                async handleCurrentGameChange(page) {
                    this.currentGamePage = page;
                    await this.handlerGetData();
                },
                async handleCurrentPyGameChange(page) {
                    this.currentPyGamePage = page;
                    await this.handlerGetData();
                },
                async handleCurrentUserGameChange(page) {
                    this.currentUserGamePage = page;
                    await this.handlerGetData();
                },
                setCookie(name, value) {
                    var Days = 30;
                    var exp = new Date();
                    exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
                    document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
                },
                getCookie(name) {
                    var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
                    if (arr = document.cookie.match(reg))
                        return unescape(arr[2]);
                    else
                        return null;
                },
                delCookie(name) {
                    var exp = new Date();
                    exp.setTime(exp.getTime() - 1);
                    var cval = this.getCookie(name);
                    if (cval != null)
                        document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
                },
                handleSelectGame(val) {
                    this.selectGameRow = val;
                },
                handleSelectUserGame(val) {
                    this.selectUserGameRow = val;
                },
                handleSelectPyGame(val) {
                    this.selectPyGameRow = val;
                },
                async handlerLogin(name) {
                    await axios.post("?handler=Login", null, {
                        params: {
                            userName: this.loginForm.userName,
                            password: this.loginForm.password
                        }
                    }).then(res => {
                        if ((res.data || null) != null) {
                            if (res.data.Successed) {
                                this.loginForm = this.initLoginForm();
                                this.setCookie("userId", res.data.UserId);
                                this.dialogSignUpVisible = false;
                                this.dialogLoginVisible = false;
                            } else {
                                this.$message.error("登录失败！");

                            }
                        } else if ((res.response || null) != null && res.response.status != 200) {
                            this.$message.error("登录失败！")
                        }
                    });
                },
                async handlerSignUp(name) {
                    await axios.post("?handler=Create", null, {
                        params: {
                            userName: this.createForm.userName,
                            password: this.createForm.password,
                            email: this.createForm.email,
                        }
                    }).then(res => {
                        if ((res.data || null) != null) {
                            if (res.data.Successed) {
                                this.createForm = this.initCreateForm();
                                this.dialogSignUpVisible = false;
                                this.dialogLoginVisible = true;
                            } else {
                                this.$message.error("注册失败！");
                            }
                        } else if ((res.response || null) != null && res.response.status != 200) {
                            this.$message.error("注册失败！")
                        }
                    });
                },
                initLoginForm() {
                    return {
                        userName: "",
                        password: ""
                    };
                },
                initCreateForm() {
                    return {
                        userName: "",
                        password: "",
                        email: ""
                    };
                },
                initFollowGame(){
                    return {
                        GameId:"",
                        GameName:"",
                        SendMailPrice: 0
                    };
                }
            },

            filters: {

            },
            watch: {
                tabModelType:{
                    handler:function(newVal,oldVal){
                        this.searchText = "";
                    },
                    deep:true,
                    immediate:true
                }
            },
        });
    </script>
}